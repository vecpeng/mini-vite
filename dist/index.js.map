{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/optimizer/index.ts","../src/node/constants.ts","../src/optimizer/scanPlguin.ts","../src/optimizer/preBundlePlugin.ts","../src/node/plugins/esbuild.ts","../src/node/utils.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts"],"sourcesContent":["import cac from 'cac';\nimport {startDevServer} from \"./server\";\nconst cli = cac();\n\ncli\n    .command(\"[root]\", \"Run the development server\")\n    .alias(\"serve\")\n    .alias(\"dev\")\n    .action(async () => {\n        await startDevServer();\n    });\n\ncli.help();\n\ncli.parse();","import connect from 'connect';\nimport { blue, green } from 'picocolors';\nimport { optimize } from \"../../optimizer\";\nimport { resolvePlugins } from \"../plugins\";\nimport { createPluginContainer, PluginContainer } from \"../pluginContainer\";\nimport { Plugin} from \"../plugin\";\nimport {indexHtmlMiddleware} from \"./middlewares/indexHtml\";\nimport { transformMiddleware } from \"./middlewares/transform\";\n\nexport interface ServerContext {\n    root: string;\n    pluginContainer: PluginContainer;\n    app: connect.Server;\n    plugins: Plugin[];\n}\n\nexport async function startDevServer() {\n    const app = connect();\n    const root = process.cwd();\n    const startTime = Date.now();\n    const plugins = resolvePlugins();\n    const pluginContainer = createPluginContainer(plugins);\n\n    const serverContext: ServerContext = {\n        root: process.cwd(),\n        app,\n        pluginContainer,\n        plugins,\n    };\n\n    for (const plugin of plugins) {\n        if (plugin.configureServer) {\n            await plugin.configureServer(serverContext);\n        }\n    }\n    // ÁºñËØë\n    app.use(transformMiddleware(serverContext));\n    // ÂÖ•Âè£htmlËµÑÊ∫ê\n    app.use(indexHtmlMiddleware(serverContext));\n    app.listen(3000, async () => {\n        // ‰æùËµñÈ¢ÑÊûÑÂª∫\n        await optimize(root);\n        console.log(\n            green(\"üöÄ No-Bundle ÊúçÂä°Â∑≤ÁªèÊàêÂäüÂêØÂä®!\"),\n            `ËÄóÊó∂: ${Date.now() - startTime}ms`\n        );\n        console.log(`> Êú¨Âú∞ËÆøÈóÆË∑ØÂæÑ: ${blue(\"http://localhost:3000\")}`);\n    })\n}\n\nexport interface ServerContext {}","import path from 'path';\nimport { build } from \"esbuild\";\nimport { scanPlugin } from \"./scanPlguin\";\nimport {green} from \"picocolors\";\nimport { preBundlePlugin } from './preBundlePlugin'\nimport {PRE_BUNDLE_DIR} from \"../node/constants\";\n\nexport async function optimize(root: string) {\n    // 1. Á°ÆÂÆöÂÖ•Âè£\n    const entry = path.resolve(root, \"src/main.tsx\");\n\n    // 2. ‰ªéÂÖ•Âè£Â§ÑÊâ´Êèè‰æùËµñ\n    const deps = new Set<string>();\n    await build({\n        entryPoints: [entry],\n        bundle: true,\n        write: false,\n        plugins: [scanPlugin((deps))],\n    });\n\n    console.log(\n        `${green(\"ÈúÄË¶ÅÈ¢ÑÊûÑÂª∫ÁöÑ‰æùËµñ\")}:\\n${[...deps]\n            .map(green)\n            .map((item) => `  ${item}`)\n            .join(\"\\n\")}`\n    );\n\n    await build({\n        entryPoints: [...deps],\n        write: true,\n        bundle: true,\n        format: \"esm\",\n        splitting: true,\n        outdir: path.resolve(root, PRE_BUNDLE_DIR),\n        plugins: [preBundlePlugin(deps)],\n    });\n}","import path from 'path';\n\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\nexport const EXTERNAL_TYPES = [\n    \"css\",\n    \"less\",\n    \"sass\",\n    \"scss\",\n    \"styl\",\n    \"stylus\",\n    \"pcss\",\n    \"postcss\",\n    \"vue\",\n    \"svelte\",\n    \"marko\",\n    \"astro\",\n    \"png\",\n    \"jpe?g\",\n    \"gif\",\n    \"svg\",\n    \"ico\",\n    \"webp\",\n    \"avif\",\n];\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const QUERY_RE = /\\?.*$/s;\nexport const HASH_RE = /#.*$/s;\nexport const DEFAULT_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];","import { Plugin } from 'esbuild';\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../node/constants';\n\nexport function scanPlugin(deps: Set<string>): Plugin {\n    return {\n        name: \"esbuild:scan-deps\",\n        setup(build) {\n            // ÂøΩÁï•ÁöÑÊñá‰ª∂Á±ªÂûã\n            build.onResolve(\n                {\n                    filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`)\n                },\n                (resolveInfo) => {\n                    const { path: id } = resolveInfo\n                    return {\n                        path: id,\n                        external: true,\n                    }\n                }\n            );\n            // ËÆ∞ÂΩï‰æùËµñ\n            build.onResolve(\n                {\n                    filter: BARE_IMPORT_RE,\n                },\n                (resolveInfo) => {\n                    const { path: id } = resolveInfo;\n                    deps.add(id);\n                    return {\n                        path: id,\n                        external: true,\n                    }\n                }\n            )\n        }\n    }\n}","import { Loader, Plugin } from 'esbuild';\nimport { BARE_IMPORT_RE } from \"../node/constants\";\nimport { init, parse } from 'es-module-lexer';\nimport path from 'path';\nimport resolve from \"resolve\";\nimport fs from 'fs-extra';\nimport createDebug from 'debug';\n\nconst debug = createDebug('dev');\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n    return {\n        name: \"esbuild:pre-pre-bundle\",\n        setup(build) {\n            build.onResolve(\n                    {\n                        filter: BARE_IMPORT_RE,\n                    },\n                    (resolveInfo) => {\n                        const {path: id, importer} = resolveInfo;\n                        const isEntry = !importer;\n                        if (deps.has(id)) {\n                            return isEntry\n                                ? {\n                                    path: id,\n                                    namespace: \"dep\",\n                                }\n                                : {\n                                    path: resolve.sync(id, {basedir: process.cwd()}),\n                                }\n                        }\n                    }\n            );\n\n            build.onLoad(\n                {\n                    filter: /.*/,\n                    namespace: \"dep\",\n                },\n                async (loadInfo) => {\n                    await init;\n                    const id = loadInfo.path;\n                    const root = process.cwd();\n                    const entryPath = resolve.sync(id, { basedir: root });\n                    const code = await fs.readFile(entryPath, \"utf-8\");\n                    const [imports, exports] = parse(code);\n                    let proxyModule = [];\n                    // commonjs Â§ÑÁêÜ\n                    if (!imports.length && !exports.length) {\n                        const res = require(entryPath);\n                        const specifiers = Object.keys(res);\n                        proxyModule.push(\n                            `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\n                            `export default require(\"${entryPath}\")`\n                        )\n                    } else {\n                        //„ÄÄesmÂ§ÑÁêÜ\n                        if (exports.includes(\"default\")) {\n                            proxyModule.push(`import d from \"${entryPath}\"; export default d`);\n                        }\n                        proxyModule.push(`export * from \"${entryPath}\"`);\n                    }\n                    debug(\"‰ª£ÁêÜÊ®°ÂºèÂÜÖÂÆπ: %o\", proxyModule.join('\\n'));\n                    const loader = path.extname(entryPath).slice(1);\n                    return {\n                        loader: loader as Loader,\n                        contents: proxyModule.join(\"\\n\"),\n                        resolveDir: root,\n                    }\n                }\n            )\n        }\n    }\n}","import { read, readFile } from \"fs-extra\";\nimport { Plugin } from \"../plugin\";\nimport { isJSRequest } from \"../utils\";\nimport esbuild from \"esbuild\";\nimport path from \"path\";\nimport { ServerContext } from \"../server\";\n\nexport function esbuildTransformPlugin(): Plugin {\n    return {\n        name: \"m-vite:esbuild-transform\",\n        // Âä†ËΩΩÊ®°Âùó\n        async load(id) {\n            if (isJSRequest(id)) {\n                try {\n                    const code = await readFile(id, \"utf-8\");\n                    return code;\n                } catch (e) {\n                    return null;\n                }\n            }\n        },\n        // ‰ΩøÁî®esbuildÊèê‰æõÁöÑapiËΩ¨Êç¢Êàêjs\n        async transform(code, id) {\n            if (isJSRequest(id)) {\n                const extname = path.extname(id).slice(1);\n                const { code: transformedCode, map } = await esbuild.transform(code, {\n                    target: \"esnext\",\n                    format: \"esm\",\n                    sourcemap: true,\n                    loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\n                });\n                return {\n                    code: transformedCode,\n                    map,\n                }\n            }\n            return null;\n        }\n    }\n}","import { JS_TYPES_RE, QUERY_RE, HASH_RE } from \"./constants\";\nimport path from \"path\";\n\nexport const isJSRequest = (id: string): boolean => {\n    id = cleanUrl(id);\n    if (JS_TYPES_RE.test(id)) {\n        return true;\n    }\n    if (!path.extname(id) && !id.endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\nexport const cleanUrl = (url: string): string => url.replace(HASH_RE, \"\").replace(QUERY_RE, \"\");\n","import { init, parse } from \"es-module-lexer\";\nimport {\n    BARE_IMPORT_RE,\n    DEFAULT_EXTENSIONS,\n    PRE_BUNDLE_DIR,\n} from \"../constants\";\nimport {\n    cleanUrl,\n    isJSRequest,\n} from \"../utils\";\nimport MagicString from \"magic-string\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server\";\nimport { pathExists } from \"fs-extra\";\nimport resolve from \"resolve\";\n\nexport function importAnalysisPlugin(): Plugin {\n    let serverContext: ServerContext;\n    return {\n        name: \"m-vite:import-analysis\",\n        configureServer(s) {\n            serverContext = s;\n        },\n        async transform(code: string, id: string) {\n            if (!isJSRequest(id)) {\n                return null;\n            }\n            await init;\n            const [imports] = parse(code);\n            const ms = new MagicString(code);\n            const resolve = async (id: string, importer?: string) => {\n                const resolved = await serverContext.pluginContainer.resolveId(\n                    id,\n                    importer\n                );\n                return resolved?.id;\n            };\n            for (const importInfo of imports) {\n                const { s: modStart, e: modEnd, n: modSource } = importInfo;\n                if (!modSource) continue;\n                if (BARE_IMPORT_RE.test(modSource)) {\n                    const bundlePath = path.join(\n                        serverContext.root,\n                        PRE_BUNDLE_DIR,\n                        `${modSource}.js`\n                    );\n                    ms.overwrite(modStart, modEnd, bundlePath);\n                } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\n                    const resolved = await resolve(modSource, id);\n                    if (resolved) {\n                        ms.overwrite(modStart, modEnd, resolved);\n                    }\n                }\n            }\n\n            return {\n                code: ms.toString(),\n                map: ms.generateMap(),\n            };\n        }\n    }\n}","import resolve from \"resolve\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server\";\nimport path from \"path\";\nimport { pathExists } from \"fs-extra\";\nimport { cleanUrl } from \"../utils\";\nimport { DEFAULT_EXTENSIONS } from \"../constants\";\n\nexport function resolvePlugin(): Plugin {\n    let serverContext: ServerContext;\n    // @ts-ignore\n    return {\n        name: \"m-vite:resolve\",\n        configureServer(s) {\n            serverContext = s;\n        },\n        async resolveId(id: string, importer?: string) {\n            console.log(\"debug resolveId: \", id);\n            if (path.isAbsolute(id)) {\n                if (await pathExists(id)) {\n                    return { id };\n                }\n                id = path.join(serverContext.root, id);\n                if (await  pathExists(id)) {\n                    return { id };\n                }\n            } else if (id.startsWith(\".\")) {\n                if (!importer) {\n                    throw new Error(\"`importer` should not be undefined\");\n                }\n                const hasExtension = path.extname(id).length > 1;\n                let resolveId: string;\n                if (hasExtension) {\n                    resolveId = resolve.sync(id, {\n                        basedir: path.dirname(importer),\n                    })\n                    if (await pathExists(resolveId)) {\n                        return { id: resolveId };\n                    }\n                } else {\n                    for (const extname of DEFAULT_EXTENSIONS) {\n                        try {\n                            const withExtension = `${id}${extname}`;\n                            resolveId = resolve.sync(withExtension, {\n                                basedir: path.dirname(importer),\n                            });\n                            if (await pathExists(resolveId)) {\n                                return { id: resolveId };\n                            }\n                        } catch (e) {\n                            continue;\n                        }\n                    }\n                }\n                return null;\n            }\n        }\n    }\n}","import { Plugin } from \"../plugin\";\nimport { esbuildTransformPlugin } from \"./esbuild\";\nimport { importAnalysisPlugin } from \"./importAnalysis\";\nimport { resolvePlugin } from \"./resolve\";\n\nexport function resolvePlugins(): Plugin[] {\n    return [resolvePlugin(), esbuildTransformPlugin(), importAnalysisPlugin()];\n}","import type {\n    LoadResult,\n    PartialResolvedId,\n    SourceDescription,\n    PluginContext as RollupPluginContext,\n    ResolvedId,\n} from \"rollup\";\nimport { Plugin } from \"./plugin\";\n\nexport interface PluginContainer {\n    resolveId(id: string, importer?: string): Promise<PartialResolvedId>;\n    load(id: string): Promise<LoadResult | null>;\n    transform(code: string, id: string): Promise<SourceDescription>;\n}\n\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n    // @ts-ignore\n    class Context implements  RollupPluginContext {\n        // @ts-ignore\n        async resolve(id: string, importer?: string) {\n            let out = await pluginContainer.resolveId(id, importer);\n            if (typeof out === \"string\") {\n                out = {\n                    id: out\n                };\n            }\n            return out as ResolvedId | null;\n        }\n    }\n\n    // @ts-ignore\n    const pluginContainer: PluginContainer = {\n        async resolveId(id: string, importer?: string) {\n            const ctx = new Context() as any;\n            for (const plugin of plugins) {\n                if (plugin.resolveId) {\n                    const newId = await plugin.resolveId.call(ctx as any, id, importer);\n                    console.log(newId);\n                    if (newId) {\n                        id = typeof newId === \"string\" ? newId : newId.id;\n                        return { id };\n                    }\n                }\n            }\n            return null;\n        },\n\n        async load(id) {\n            const ctx = new Context() as any;\n            for (const plugin of plugins) {\n                if (plugin.load) {\n                    const result = await plugin.load.call(ctx, id);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            return null;\n        },\n\n        async transform(code, id) {\n            const ctx = new Context() as any;\n            for (const plugin of plugins) {\n                if (plugin.transform) {\n                    const result = await plugin.transform.call(ctx, code, id);\n                    if (!result) continue;\n                    if (typeof result === \"string\") {\n                        code = result;\n                    } else if (result.code) {\n                        code = result.code;\n                    }\n                }\n            }\n            return { code };\n        }\n    };\n    return pluginContainer;\n}","import { NextHandleFunction } from \"connect\";\nimport { ServerContext } from \"../index\";\nimport path from \"path\";\nimport { pathExists, readFile } from \"fs-extra\";\n\nexport function indexHtmlMiddleware(\n    serverContext: ServerContext\n): NextHandleFunction {\n    return async (req, res, next) => {\n        if (req.url === \"/\") {\n            const { root } = serverContext;\n            const indexHtmlPath = path.join(root, \"index.html\");\n            if (await pathExists(indexHtmlPath)) {\n                const rawHtml = await readFile(indexHtmlPath, \"utf8\");\n                let html = rawHtml;\n                for (const plugin of serverContext.plugins) {\n                    if (plugin.transformIndexHtml) {\n                        html = await plugin.transformIndexHtml(html);\n                    }\n                }\n\n                res.statusCode = 200;\n                res.setHeader(\"Content-Type\", \"text/html\");\n                return res.end(html);\n            }\n        }\n        return next();\n    };\n}","import { NextHandleFunction } from \"connect\";\nimport {\n    isJSRequest,\n    cleanUrl,\n} from \"../../utils\";\nimport { ServerContext } from \"../index\";\nimport createDebug from \"debug\";\n\nconst debug = createDebug(\"dev\");\n\nexport async function transformRequest(\n    url: string,\n    serverContext: ServerContext,\n) {\n    const { pluginContainer } = serverContext;\n    url = cleanUrl(url);\n\n    const resolvedResult = await pluginContainer.resolveId(url);\n\n    let transformResult;\n    if (resolvedResult?.id) {\n        let code = await pluginContainer.load(resolvedResult.id);\n        if (typeof  code === \"object\" && code != null) {\n            code = code.code;\n        }\n        if (code) {\n            transformResult = await pluginContainer.transform(\n                code as string,\n                resolvedResult?.id\n            );\n        }\n    }\n    return transformResult;\n}\n\nexport function transformMiddleware(\n    serverContext: ServerContext\n): NextHandleFunction {\n    return async (req, res, next) => {\n        if (req.method !== \"GET\" && !req.url) {\n            return next();\n        }\n        const url = req.url ?? \"\";\n        debug(\"transformMiddleware: %s\", url);\n\n        if (isJSRequest(url)) {\n            let result = await  transformRequest(url!, serverContext);\n            if (!result) {\n                return next();\n            }\n            if (result && typeof result !== \"string\") {\n                // @ts-ignore\n                result = result?.code;\n            }\n            res.statusCode = 200;\n            res.setHeader(\"Content-Type\", \"application/javascript\");\n            return res.end(result);\n        }\n\n        next();\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;AAAA,iBAAgB;;;ACAhB,qBAAoB;AACpB,yBAA4B;;;ACD5B,mBAAiB;AACjB,qBAAsB;;;ACDtB,kBAAiB;AAEV,IAAM,iBAAiB,oBAAK,KAAK,gBAAgB,SAAS;AAC1D,IAAM,iBAAiB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEO,IAAM,iBAAiB;AACvB,IAAM,cAAc;AACpB,IAAM,WAAW;AACjB,IAAM,UAAU;AAChB,IAAM,qBAAqB,CAAC,QAAQ,OAAO,QAAQ,IAAI;;;AC1BvD,oBAAoB,MAA2B;AAClD,SAAO;AAAA,IACH,MAAM;AAAA,IACN,MAAM,QAAO;AAET,aAAM,UACF;AAAA,QACI,QAAQ,IAAI,OAAO,OAAO,eAAe,KAAK,GAAG,KAAK;AAAA,MAC1D,GACA,CAAC,gBAAgB;AACb,cAAM,EAAE,MAAM,OAAO;AACrB,eAAO;AAAA,UACH,MAAM;AAAA,UACN,UAAU;AAAA,QACd;AAAA,MACJ,CACJ;AAEA,aAAM,UACF;AAAA,QACI,QAAQ;AAAA,MACZ,GACA,CAAC,gBAAgB;AACb,cAAM,EAAE,MAAM,OAAO;AACrB,aAAK,IAAI,EAAE;AACX,eAAO;AAAA,UACH,MAAM;AAAA,UACN,UAAU;AAAA,QACd;AAAA,MACJ,CACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AFjCA,wBAAoB;;;AGDpB,6BAA4B;AAC5B,mBAAiB;AACjB,qBAAoB;AACpB,sBAAe;AACf,mBAAwB;AAExB,IAAM,QAAQ,0BAAY,KAAK;AAExB,yBAAyB,MAA2B;AACvD,SAAO;AAAA,IACH,MAAM;AAAA,IACN,MAAM,QAAO;AACT,aAAM,UACE;AAAA,QACI,QAAQ;AAAA,MACZ,GACA,CAAC,gBAAgB;AACb,cAAM,EAAC,MAAM,IAAI,aAAY;AAC7B,cAAM,UAAU,CAAC;AACjB,YAAI,KAAK,IAAI,EAAE,GAAG;AACd,iBAAO,UACD;AAAA,YACE,MAAM;AAAA,YACN,WAAW;AAAA,UACf,IACE;AAAA,YACE,MAAM,uBAAQ,KAAK,IAAI,EAAC,SAAS,QAAQ,IAAI,EAAC,CAAC;AAAA,UACnD;AAAA,QACR;AAAA,MACJ,CACR;AAEA,aAAM,OACF;AAAA,QACI,QAAQ;AAAA,QACR,WAAW;AAAA,MACf,GACA,OAAO,aAAa;AAChB,cAAM;AACN,cAAM,KAAK,SAAS;AACpB,cAAM,OAAO,QAAQ,IAAI;AACzB,cAAM,YAAY,uBAAQ,KAAK,IAAI,EAAE,SAAS,KAAK,CAAC;AACpD,cAAM,OAAO,MAAM,wBAAG,SAAS,WAAW,OAAO;AACjD,cAAM,CAAC,SAAS,WAAW,kCAAM,IAAI;AACrC,YAAI,cAAc,CAAC;AAEnB,YAAI,CAAC,QAAQ,UAAU,CAAC,QAAQ,QAAQ;AACpC,gBAAM,MAAM,QAAQ;AACpB,gBAAM,aAAa,OAAO,KAAK,GAAG;AAClC,sBAAY,KACR,YAAY,WAAW,KAAK,GAAG,aAAa,cAC5C,2BAA2B,aAC/B;AAAA,QACJ,OAAO;AAEH,cAAI,QAAQ,SAAS,SAAS,GAAG;AAC7B,wBAAY,KAAK,kBAAkB,8BAA8B;AAAA,UACrE;AACA,sBAAY,KAAK,kBAAkB,YAAY;AAAA,QACnD;AACA,cAAM,4CAAc,YAAY,KAAK,IAAI,CAAC;AAC1C,cAAM,SAAS,qBAAK,QAAQ,SAAS,EAAE,MAAM,CAAC;AAC9C,eAAO;AAAA,UACH;AAAA,UACA,UAAU,YAAY,KAAK,IAAI;AAAA,UAC/B,YAAY;AAAA,QAChB;AAAA,MACJ,CACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AHlEA,wBAA+B,MAAc;AAEzC,QAAM,QAAQ,qBAAK,QAAQ,MAAM,cAAc;AAG/C,QAAM,OAAO,oBAAI,IAAY;AAC7B,QAAM,0BAAM;AAAA,IACR,aAAa,CAAC,KAAK;AAAA,IACnB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS,CAAC,WAAY,IAAK,CAAC;AAAA,EAChC,CAAC;AAED,UAAQ,IACJ,GAAG,6BAAM,kDAAU;AAAA,EAAO,CAAC,GAAG,IAAI,EAC7B,IAAI,uBAAK,EACT,IAAI,CAAC,SAAS,KAAK,MAAM,EACzB,KAAK,IAAI,GAClB;AAEA,QAAM,0BAAM;AAAA,IACR,aAAa,CAAC,GAAG,IAAI;AAAA,IACrB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ,qBAAK,QAAQ,MAAM,cAAc;AAAA,IACzC,SAAS,CAAC,gBAAgB,IAAI,CAAC;AAAA,EACnC,CAAC;AACL;;;AIpCA,uBAA+B;;;ACC/B,mBAAiB;AAEV,IAAM,cAAc,CAAC,OAAwB;AAChD,OAAK,SAAS,EAAE;AAChB,MAAI,YAAY,KAAK,EAAE,GAAG;AACtB,WAAO;AAAA,EACX;AACA,MAAI,CAAC,qBAAK,QAAQ,EAAE,KAAK,CAAC,GAAG,SAAS,GAAG,GAAG;AACxC,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,IAAM,WAAW,CAAC,QAAwB,IAAI,QAAQ,SAAS,EAAE,EAAE,QAAQ,UAAU,EAAE;;;ADX9F,sBAAoB;AACpB,mBAAiB;AAGV,kCAA0C;AAC7C,SAAO;AAAA,IACH,MAAM;AAAA,UAEA,KAAK,IAAI;AACX,UAAI,YAAY,EAAE,GAAG;AACjB,YAAI;AACA,gBAAM,OAAO,MAAM,+BAAS,IAAI,OAAO;AACvC,iBAAO;AAAA,QACX,SAAS,GAAP;AACE,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA,UAEM,UAAU,MAAM,IAAI;AACtB,UAAI,YAAY,EAAE,GAAG;AACjB,cAAM,UAAU,qBAAK,QAAQ,EAAE,EAAE,MAAM,CAAC;AACxC,cAAM,EAAE,MAAM,iBAAiB,QAAQ,MAAM,wBAAQ,UAAU,MAAM;AAAA,UACjE,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,WAAW;AAAA,UACX,QAAQ;AAAA,QACZ,CAAC;AACD,eAAO;AAAA,UACH,MAAM;AAAA,UACN;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;AEvCA,8BAA4B;AAU5B,0BAAwB;AACxB,mBAAiB;AAMV,gCAAwC;AAC3C,MAAI;AACJ,SAAO;AAAA,IACH,MAAM;AAAA,IACN,gBAAgB,GAAG;AACf,sBAAgB;AAAA,IACpB;AAAA,UACM,UAAU,MAAc,IAAY;AACtC,UAAI,CAAC,YAAY,EAAE,GAAG;AAClB,eAAO;AAAA,MACX;AACA,YAAM;AACN,YAAM,CAAC,WAAW,mCAAM,IAAI;AAC5B,YAAM,KAAK,IAAI,4BAAY,IAAI;AAC/B,YAAM,WAAU,OAAO,KAAY,aAAsB;AACrD,cAAM,WAAW,MAAM,cAAc,gBAAgB,UACjD,KACA,QACJ;AACA,eAAO,UAAU;AAAA,MACrB;AACA,iBAAW,cAAc,SAAS;AAC9B,cAAM,EAAE,GAAG,UAAU,GAAG,QAAQ,GAAG,cAAc;AACjD,YAAI,CAAC;AAAW;AAChB,YAAI,eAAe,KAAK,SAAS,GAAG;AAChC,gBAAM,aAAa,qBAAK,KACpB,cAAc,MACd,gBACA,GAAG,cACP;AACA,aAAG,UAAU,UAAU,QAAQ,UAAU;AAAA,QAC7C,WAAW,UAAU,WAAW,GAAG,KAAK,UAAU,WAAW,GAAG,GAAG;AAC/D,gBAAM,WAAW,MAAM,SAAQ,WAAW,EAAE;AAC5C,cAAI,UAAU;AACV,eAAG,UAAU,UAAU,QAAQ,QAAQ;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAEA,aAAO;AAAA,QACH,MAAM,GAAG,SAAS;AAAA,QAClB,KAAK,GAAG,YAAY;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC9DA,sBAAoB;AAGpB,mBAAiB;AACjB,uBAA2B;AAIpB,yBAAiC;AACpC,MAAI;AAEJ,SAAO;AAAA,IACH,MAAM;AAAA,IACN,gBAAgB,GAAG;AACf,sBAAgB;AAAA,IACpB;AAAA,UACM,UAAU,IAAY,UAAmB;AAC3C,cAAQ,IAAI,qBAAqB,EAAE;AACnC,UAAI,qBAAK,WAAW,EAAE,GAAG;AACrB,YAAI,MAAM,iCAAW,EAAE,GAAG;AACtB,iBAAO,EAAE,GAAG;AAAA,QAChB;AACA,aAAK,qBAAK,KAAK,cAAc,MAAM,EAAE;AACrC,YAAI,MAAO,iCAAW,EAAE,GAAG;AACvB,iBAAO,EAAE,GAAG;AAAA,QAChB;AAAA,MACJ,WAAW,GAAG,WAAW,GAAG,GAAG;AAC3B,YAAI,CAAC,UAAU;AACX,gBAAM,IAAI,MAAM,oCAAoC;AAAA,QACxD;AACA,cAAM,eAAe,qBAAK,QAAQ,EAAE,EAAE,SAAS;AAC/C,YAAI;AACJ,YAAI,cAAc;AACd,sBAAY,wBAAQ,KAAK,IAAI;AAAA,YACzB,SAAS,qBAAK,QAAQ,QAAQ;AAAA,UAClC,CAAC;AACD,cAAI,MAAM,iCAAW,SAAS,GAAG;AAC7B,mBAAO,EAAE,IAAI,UAAU;AAAA,UAC3B;AAAA,QACJ,OAAO;AACH,qBAAW,WAAW,oBAAoB;AACtC,gBAAI;AACA,oBAAM,gBAAgB,GAAG,KAAK;AAC9B,0BAAY,wBAAQ,KAAK,eAAe;AAAA,gBACpC,SAAS,qBAAK,QAAQ,QAAQ;AAAA,cAClC,CAAC;AACD,kBAAI,MAAM,iCAAW,SAAS,GAAG;AAC7B,uBAAO,EAAE,IAAI,UAAU;AAAA,cAC3B;AAAA,YACJ,SAAS,GAAP;AACE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACrDO,0BAAoC;AACvC,SAAO,CAAC,cAAc,GAAG,uBAAuB,GAAG,qBAAqB,CAAC;AAC7E;;;ACQO,IAAM,wBAAwB,CAAC,YAAuC;AAEzE,QAAM,QAAwC;AAAA,UAEpC,QAAQ,IAAY,UAAmB;AACzC,UAAI,MAAM,MAAM,gBAAgB,UAAU,IAAI,QAAQ;AACtD,UAAI,OAAO,QAAQ,UAAU;AACzB,cAAM;AAAA,UACF,IAAI;AAAA,QACR;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAGA,QAAM,kBAAmC;AAAA,UAC/B,UAAU,IAAY,UAAmB;AAC3C,YAAM,MAAM,IAAI,QAAQ;AACxB,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,WAAW;AAClB,gBAAM,QAAQ,MAAM,OAAO,UAAU,KAAK,KAAY,IAAI,QAAQ;AAClE,kBAAQ,IAAI,KAAK;AACjB,cAAI,OAAO;AACP,iBAAK,OAAO,UAAU,WAAW,QAAQ,MAAM;AAC/C,mBAAO,EAAE,GAAG;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,UAEM,KAAK,IAAI;AACX,YAAM,MAAM,IAAI,QAAQ;AACxB,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,MAAM;AACb,gBAAM,SAAS,MAAM,OAAO,KAAK,KAAK,KAAK,EAAE;AAC7C,cAAI,QAAQ;AACR,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,UAEM,UAAU,MAAM,IAAI;AACtB,YAAM,MAAM,IAAI,QAAQ;AACxB,iBAAW,UAAU,SAAS;AAC1B,YAAI,OAAO,WAAW;AAClB,gBAAM,SAAS,MAAM,OAAO,UAAU,KAAK,KAAK,MAAM,EAAE;AACxD,cAAI,CAAC;AAAQ;AACb,cAAI,OAAO,WAAW,UAAU;AAC5B,mBAAO;AAAA,UACX,WAAW,OAAO,MAAM;AACpB,mBAAO,OAAO;AAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,EAAE,KAAK;AAAA,IAClB;AAAA,EACJ;AACA,SAAO;AACX;;;AC3EA,mBAAiB;AACjB,uBAAqC;AAE9B,6BACH,eACkB;AAClB,SAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,QAAI,IAAI,QAAQ,KAAK;AACjB,YAAM,EAAE,SAAS;AACjB,YAAM,gBAAgB,qBAAK,KAAK,MAAM,YAAY;AAClD,UAAI,MAAM,iCAAW,aAAa,GAAG;AACjC,cAAM,UAAU,MAAM,+BAAS,eAAe,MAAM;AACpD,YAAI,OAAO;AACX,mBAAW,UAAU,cAAc,SAAS;AACxC,cAAI,OAAO,oBAAoB;AAC3B,mBAAO,MAAM,OAAO,mBAAmB,IAAI;AAAA,UAC/C;AAAA,QACJ;AAEA,YAAI,aAAa;AACjB,YAAI,UAAU,gBAAgB,WAAW;AACzC,eAAO,IAAI,IAAI,IAAI;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;;;ACtBA,oBAAwB;AAExB,IAAM,SAAQ,2BAAY,KAAK;AAE/B,gCACI,KACA,eACF;AACE,QAAM,EAAE,oBAAoB;AAC5B,QAAM,SAAS,GAAG;AAElB,QAAM,iBAAiB,MAAM,gBAAgB,UAAU,GAAG;AAE1D,MAAI;AACJ,MAAI,gBAAgB,IAAI;AACpB,QAAI,OAAO,MAAM,gBAAgB,KAAK,eAAe,EAAE;AACvD,QAAI,OAAQ,SAAS,YAAY,QAAQ,MAAM;AAC3C,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,MAAM;AACN,wBAAkB,MAAM,gBAAgB,UACpC,MACA,gBAAgB,EACpB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AAEO,6BACH,eACkB;AAClB,SAAO,OAAO,KAAK,KAAK,SAAS;AAC7B,QAAI,IAAI,WAAW,SAAS,CAAC,IAAI,KAAK;AAClC,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,MAAM,IAAI,OAAO;AACvB,WAAM,2BAA2B,GAAG;AAEpC,QAAI,YAAY,GAAG,GAAG;AAClB,UAAI,SAAS,MAAO,iBAAiB,KAAM,aAAa;AACxD,UAAI,CAAC,QAAQ;AACT,eAAO,KAAK;AAAA,MAChB;AACA,UAAI,UAAU,OAAO,WAAW,UAAU;AAEtC,iBAAS,QAAQ;AAAA,MACrB;AACA,UAAI,aAAa;AACjB,UAAI,UAAU,gBAAgB,wBAAwB;AACtD,aAAO,IAAI,IAAI,MAAM;AAAA,IACzB;AAEA,SAAK;AAAA,EACT;AACJ;;;AZ7CA,gCAAuC;AACnC,QAAM,MAAM,4BAAQ;AACpB,QAAM,OAAO,QAAQ,IAAI;AACzB,QAAM,YAAY,KAAK,IAAI;AAC3B,QAAM,UAAU,eAAe;AAC/B,QAAM,kBAAkB,sBAAsB,OAAO;AAErD,QAAM,gBAA+B;AAAA,IACjC,MAAM,QAAQ,IAAI;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAEA,aAAW,UAAU,SAAS;AAC1B,QAAI,OAAO,iBAAiB;AACxB,YAAM,OAAO,gBAAgB,aAAa;AAAA,IAC9C;AAAA,EACJ;AAEA,MAAI,IAAI,oBAAoB,aAAa,CAAC;AAE1C,MAAI,IAAI,oBAAoB,aAAa,CAAC;AAC1C,MAAI,OAAO,KAAM,YAAY;AAEzB,UAAM,SAAS,IAAI;AACnB,YAAQ,IACJ,8BAAM,uEAAwB,GAC9B,iBAAO,KAAK,IAAI,IAAI,aACxB;AACA,YAAQ,IAAI,2CAAa,6BAAK,uBAAuB,GAAG;AAAA,EAC5D,CAAC;AACL;;;AD9CA,IAAM,MAAM,wBAAI;AAEhB,IACK,QAAQ,UAAU,4BAA4B,EAC9C,MAAM,OAAO,EACb,MAAM,KAAK,EACX,OAAO,YAAY;AAChB,QAAM,eAAe;AACzB,CAAC;AAEL,IAAI,KAAK;AAET,IAAI,MAAM;","names":[]}